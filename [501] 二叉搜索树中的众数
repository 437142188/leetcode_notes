给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。

假定 BST 有如下定义：

结点左子树中所含结点的值小于等于当前结点的值
结点右子树中所含结点的值大于等于当前结点的值
左子树和右子树都是二叉搜索树

/*
 * @lc app=leetcode.cn id=501 lang=cpp
 *
 * [501] 二叉搜索树中的众数
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int count = 0;
int max_count = 0;
TreeNode* pre;
vector<int> result;

public:
    vector<int> findMode(TreeNode* root) {
        if(root == nullptr)
            return result;
        
        count = 0;
        pre = nullptr;
        recursion(root);

        return result;


    }

    void recursion(TreeNode* cur)
    {
        if(cur == nullptr)
            return;
        
        recursion(cur->left);

        if(pre == nullptr)
            count = 1;
        else if(pre->val == cur->val)
            count++;
        else
        {
            count = 1;
        }
            
        
        // cout<<count<<","<<cur->val<<endl;
        if(max_count < count)
        {
            max_count = count;
            result.clear();
            result.push_back(cur->val);
        }
        else if(max_count == count)
            result.push_back(cur->val);

        pre = cur;

        recursion(cur->right);

    }
};
// @lc code=end

思路：使用中序遍历，直接在树中判断。由于中序遍历的数组是有序的，因此只需要记住前一个数据就可以统计求和了。
时间复杂度：O(n)
空间复杂度：O(n)
