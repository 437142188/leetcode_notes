给你一个二叉搜索树的根节点 root ，返回 树中任意两不同节点值之间的最小差值 。

差值是一个正数，其数值等于两值之差的绝对值。

/*
 * @lc app=leetcode.cn id=530 lang=cpp
 *
 * [530] 二叉搜索树的最小绝对差
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        vector<int> vec;

        recursion(root,vec);

        int min_d = abs(vec[1]-vec[0]);

        for(int i = 2;i < vec.size(); i++)
        {
            int temp = abs(vec[i]-vec[i-1]);
            if(min_d > temp)
                min_d = temp;
        }

        return min_d;
    }

    void recursion(TreeNode* node,vector<int>& vec)
    {
        if(node == nullptr)
            return;
        
        recursion(node->left,vec);
        vec.push_back(node->val);
        recursion(node->right,vec);
        return;
    }
};
// @lc code=end

思路：使用中序遍历出有序的数组，然后两个两个之间求最小值
时间复杂度：O(n)
空间复杂度：O(n)
