给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

你可以假设数组中无重复元素。

示例 1:

输入: [1,3,5,6], 5
输出: 2

示例 2:

输入: [1,3,5,6], 2
输出: 1

示例 3:

输入: [1,3,5,6], 7
输出: 4

示例 4:

输入: [1,3,5,6], 0
输出: 0

思路：先用二分搜索，寻找目标值，如果不存在，则判断搜索后的中值与目标值的大小，如果中值大于目标值，则结果为目标值，如果小于，则结果为目标值+1
代码：
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int left_index =0,right_index = nums.size()-1;
        
        if(right_index == -1)
            return 0;
        
        int middle_index;
        
        while(left_index <= right_index)
        {
            middle_index = (left_index + right_index)/2;
            
            if(nums.at(middle_index) > target)
            {
                right_index = middle_index - 1;
            }
            else if(nums.at(middle_index) < target)
            {
                left_index = middle_index + 1;
            }
            else
            {
                break;
            }
        }
        
        if(nums.at(middle_index) == target)
            return middle_index;
        else if(nums.at(middle_index) < target)
        {
            return middle_index+1;
        }
        else
        {
            return middle_index;
        }
    }
};

算法复杂度：O(logn)
