给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。

叶子节点 是指没有子节点的节点。

/*
 * @lc app=leetcode.cn id=112 lang=cpp
 *
 * [112] 路径总和
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(root == nullptr)
            return false;

        int sum = root->val;
        return recall(root,sum,targetSum);
    }

    bool recall(TreeNode* node,int sum,int targetSum)
    {
        if(node->left == nullptr
            && node->right == nullptr)
            {
                return sum == targetSum ? true : false;
            }

        if(node->left != nullptr)
            if(recall(node->left,sum+node->left->val,targetSum))
                return true;
        if(node->right != nullptr)
            if(recall(node->right,sum+node->right->val,targetSum))
                return true;

        return false;
    }
};
// @lc code=end

思路:使用回溯寻找有效的路径,如果和满足要求,则立马返回
时间复杂度:O(n)
空间复杂度:O(n)
