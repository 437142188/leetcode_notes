实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

代码：
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int length = nums.size();
        if(length < 2)
            return;
        
        int i = length - 2;
        
        for(;i >= 0;i--)
        {
            if(nums.at(i) < nums.at(i+1))
            {
                break;
            }
        }
        
        if(i != -1)
        {
            for(int j = length-1;j > i;j--)
            {
                if(nums.at(i) < nums.at(j))
                {
                    int temp = nums.at(j);
                    nums.at(j) = nums.at(i);
                    nums.at(i) = temp;
                    break;
                }
            }
        }
        
        for(int j = i+1;j < i+1+(length-1-i)/2;j++)
        {
            int temp = nums.at(j);
            nums.at(j) = nums.at(length-j+i);
            nums.at(length-j+i) = temp;
        }
    }
};

思路：这个题目第一次遇到没有任何头绪，甚至连题目都看不懂，大意是经过重新排序后，求取大于且唯一大于原数的数。
从后往前扫描找到第一个下标i,使得nums[i] < nums[i + 1];
若i = -1，表示该数组为单调递减序列;否则，从后往前扫描找到找到第一个下标j使得nums[j] > nums[i]，交换两数且不破坏nums(i, nums.length)的单调性；
翻转nums(i, nums.length)使其成为单调增序列。
上述思路来源于题解，该解需要经过严格数学推导才能得出，并非十分直观，暂时只能强背。
算法复杂度：时间复杂度O(n),空间复杂度O(1)
