给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。

如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

示例 :

给定这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5

说明 :

    你的算法只能使用常数的额外空间。
    你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

ListNode * swap_node(ListNode *p1,int k)
{
    stack <ListNode*>stk;
    ListNode* p_temp = p1;
    for(size_t i = 0;i < k;i++)
    {
        stk.push(p_temp);
        p_temp = p_temp->next;
    }
    
    ListNode* p_temp2 = stk.top();
    ListNode* p_out = p_temp2;
    ListNode* p_next = p_out->next;
    stk.pop();
    
    while(!stk.empty())
    {
        p_temp2->next = stk.top();
        stk.pop();
        p_temp2 = p_temp2->next;
    }
    p_temp2->next = p_next;
    
    return p_out;
}

bool check_null(ListNode *p1,int k)
{
    ListNode* p_temp = p1;
    for(size_t i = 0;i < k;i++)
    {
        if(p_temp == NULL)
        {
            return true;
        }
        p_temp = p_temp->next;
    }
    return false;
}

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode first_node(0);
        first_node.next = head;
        ListNode * p = &first_node;
        ListNode * p2 = head;
        while(!check_null(p2,k))
        {
            p->next = swap_node(p2,k);
            p = p2;
            p2 = p2->next;
        }
        
        return first_node.next;
    }
};

思路：
与交换两个链表的思路类似，只是把2换成了k

算法复杂度：
时间复杂度O(n/k*k),n为总的链表个数
