给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。

返回被除数 dividend 除以除数 divisor 得到的商。

示例 1:

输入: dividend = 10, divisor = 3
输出: 3

示例 2:

输入: dividend = 7, divisor = -3
输出: -2

说明:

    被除数和除数均为 32 位有符号整数。
    除数不为 0。
    假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。

代码：class Solution {
public:
    int divide(int dividend, int divisor) {
        int count = 0;
        if(dividend == -2147483648 && divisor == -2147483648)
        {
            return 1;
        }
        else if(dividend == -2147483648)
        {
            dividend += abs(divisor);
            count++;
        }
        else if(divisor == -2147483648)
        {
            return count;
        }
        
        
        if(abs(dividend) < abs(divisor))
            return count;
        int dividend_sign = dividend > 0?1:-1;
        int divisor_sign = divisor > 0?1:-1;
        
        int nsign_dividend = abs(dividend);
        int nsign_divisor = abs(divisor);
        
        if(nsign_dividend == nsign_divisor)
            return dividend_sign*divisor_sign;
        
        int sum = 0;
        int check_value = nsign_dividend-nsign_divisor;
        while(sum < check_value)
        {
            sum += nsign_divisor;
            count++;
        }
        
        return dividend_sign*divisor_sign*count;
    }
};

上述代码在解决了一些特殊情况后，当输入为2147483648，１时，执行超时，说明这种方法效率过低
复杂度分析：O(１)－O(2147483647)
改进：使用二进制位移操作，把数据当做二进制数据，使用位移来实现除法运算
参考代码：
class Solution {
public:
    int divide(int dividend, int divisor) {
        // 特判
        if (divisor == 0)
            return 0;
        if (divisor == 1)
            return dividend;
        if (dividend == INT_MIN && divisor == -1)
            return INT_MAX;
        
        int signdiff = (dividend > 0) ^ (divisor >0);
        
        long t = abs((long)dividend);
        long d = abs((long)divisor);
        int result = 0;
        
        for (int i = 31; i >= 0; i --){
            if ((t >> i) >= d){
                result += 1 << i;
                t -= d << i;
            }
        }
        return signdiff ? -result : result;
    }
};

复杂度分析：O(32)
