给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：

给定一个链表: 1->2->3->4->5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1->2->3->5.

说明：

给定的 n 保证是有效的。

进阶：

你能尝试使用一趟扫描实现吗？

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        vector<ListNode*> listnode_points;
        
        ListNode* p= head;
        while(p != NULL)
        {
            listnode_points.push_back(p);
            p = p->next;
        }
        
        int size = listnode_points.size();
        if(1 == listnode_points.size())
        {
            listnode_points.back()->next = NULL;
            return NULL; 
        }
        if(1 == n)
        {
            listnode_points[size-n-1]->next = NULL;
            return listnode_points.front(); 
        }
        if(listnode_points.size() == n)
        {
            return listnode_points.front()->next;
        }
        
        listnode_points[size-n-1]->next = listnode_points[size-n+1];
        return listnode_points.front();
    }
};

思路：先使用vector存储所有有效的链表地址，然后根据n的情况删除对应链表，并输出需要的链表头。做题时候很多次都是出现在情况考虑不周到，导致一些细节错误，看来思路还是
不够严谨，需要谨记！！
复杂度分析：时间复杂度O(n),空间复杂度O(n)。
改进方法：1、对于一些极端情况，可以使用哑结点，在front处插入哑结点，减少极端情况的处理。
        2、考虑使用双指针法，第一个指针指向开头，第二个指针指向其后+n的位置。然后同时向右移动两个指针，当第二个指针指向尾部时，第一个指针指向的位置删除即可。
