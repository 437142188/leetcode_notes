
给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。

'?' 可以匹配任何单个字符。
'*' 可以匹配任意字符串（包括空字符串）。
两个字符串完全匹配才算匹配成功。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。

解答：
class Solution {
public:
    bool isMatch(string s, string p) {
        int s_size = s.size();
        int p_size = p.size();
        vector<vector<bool>> dp(s_size+1,vector<bool>(p_size+1));
        dp[0][0] = true;

        //check dp[0][j]
        for(int j=1;j<p_size+1;j++){
            if(p[j-1] == '*'){
                dp[0][j] = true;
            }
            else
                break;
        }

        for(int i = 1;i < s_size + 1;i++){
            for(int j = 1;j < p_size + 1; j++){
                if(p[j-1] == '?'){
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(p[j-1] == '*'){
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }
                else
                    dp[i][j] = dp[i-1][j-1] && (s[i-1] == p[j-1]);
            }
        }

        return dp[s_size][p_size];
    }
};

思路：与通配符匹配的相关代码适合用DP算法，核心是能写出状态转移方程。本题中，设dp[i][j]为s的前i个字符和p的前j个字符是否匹配，然后根据p[j]取不同的字符，得到一个分情况的状态转移方程。最后列出
边界条件，就能够递推出来最终结果
时间复杂度：O(nm)
空间复杂度：O(nm)
