给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明：叶子节点是指没有子节点的节点。

/*
 * @lc app=leetcode.cn id=111 lang=cpp
 *
 * [111] 二叉树的最小深度
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root == nullptr)
            return 0;

        queue<TreeNode*> queue;
        queue.push(root);
        int count = 0;

        while(!queue.empty())
        {
            int size = queue.size();
            count++;
            for(int i = 0; i < size; i++)
            {
                auto node = queue.front();
                queue.pop();
                if(node->left == nullptr && node->right == nullptr)
                {
                    return count;
                }
                if(node->left != nullptr)
                    queue.push(node->left);
                if(node->right != nullptr)
                    queue.push(node->right);
            }
        }
        return count;
    }
};
// @lc code=end

思路:使用层序遍历,如果当前节点的孩子节点均为空,则返回当前层
时间复杂度:O(n)
空间复杂度:O(n)
