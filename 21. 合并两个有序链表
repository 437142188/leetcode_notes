将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        if(l1 == NULL)
        {
            return l2;
        }
        if(l2 == NULL)
        {
            return l1;
        }
        
        int task_flag = 2;
        ListNode* pout = l1;
        ListNode* l1_temp = l1->next;
        ListNode* l2_temp = l2;
        
        ListNode *p = l1;
        while(task_flag != 3)
        {
            switch(task_flag)
            {
                case 1:
                    {
                        p->next =  l1_temp;
                        l1_temp = l1_temp->next;
                        task_flag = l2_temp == NULL? 1:2;
                        break;
                    }
                case 2:
                    {
                        p->next =  l2_temp;
                        l2_temp = l2_temp->next;
                        task_flag = l1_temp == NULL? 2:1;
                        break;
                    }
                default:
                    break;
            }
            if(l1_temp == NULL && l2_temp == NULL)
            {
                task_flag = 3;
            }
            p = p->next;
        }
        
        return pout;
    }
};

思路：上述代码存在题目理解错误，只是进行了两个链表的分别读取。

参考代码：
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){
    if(l1 == NULL) return l2;
    if(l2 == NULL) return l1;
    
    struct ListNode newhead, *p1, *p2;
    newhead.next = l1;
    l1 = &newhead;
    
    while(l2 != NULL) {
        p1 = l1->next;
        p2 = l2->next;
        if(p1 == NULL) {
            l1->next = l2;
            break;
        }
        if(l2->val <= p1->val) {
            l2->next = l1->next;
            l1->next = l2;
            l2 = p2;
        }
        l1 = l1->next;
    }
    return newhead.next;
}

思路：对第二个链表进行遍历，依次找出对应的位置，进行链表插入操作。
复杂度分析：时间复杂度O(n+m)，n和m分别为两个链表的长度
