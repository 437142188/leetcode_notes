给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。

注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 

/*
 * @lc app=leetcode.cn id=701 lang=cpp
 *
 * [701] 二叉搜索树中的插入操作
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root == nullptr)
            return new TreeNode(val);
        recursion(root,val);

        return root;
    }

    void recursion(TreeNode* root, int val)
    {
        if(root == nullptr)
        {
            return;
        }

        if(root->val < val)
            if(root->right == nullptr)
            {
                root->right = new TreeNode(val);
                return;
            }
            else
                recursion(root->right,val);
        else
            if(root->left == nullptr)
            {
                
                root->left = new TreeNode(val);
                return;
            }
            else
                recursion(root->left,val);
        
    }
};
// @lc code=end

思路：题目说有多重方法，最简单的方法就是直接对二叉搜索树进行搜索，找到叶子结点插入新的节点。递归函数有 有返回值和无返回值的两种写法，有返回值的写法要相对简洁一些。
时间复杂度：O(n)
空间复杂度：O(n)
