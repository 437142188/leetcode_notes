合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

示例:

输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)
        {
            return NULL;
        }
        if(lists.size() == 1)
        {
            return lists.front();
        }
        
        ListNode* first = lists.front();
        
        for(size_t i = 1;i < lists.size();i++)
        {
            ListNode* second = lists.at(i);
            first = sort_two_list(first,second);
        }
        
        return first;
    }
    
    ListNode* sort_two_list(ListNode* first,ListNode* second)
    {
        if(first == NULL)
        {
            return second;
        }
        if(second == NULL)
        {
            return first;
        }
        
        ListNode start_node(0);
        ListNode *p_start_node = &start_node;
        ListNode *p_f = first,*p_s = second;
        while(p_f != NULL || p_s != NULL)
        {
            if(p_f == NULL)
            {
                p_start_node->next = p_s;
                p_s = p_s->next;
            }
            else if(p_s == NULL)
            {
                p_start_node->next = p_f;
                p_f = p_f->next;
            }
            else if(p_f->val < p_s->val)
            {
                p_start_node->next = p_f;
                p_f = p_f->next;
            }
            else
            {
                p_start_node->next = p_s;
                p_s = p_s->next;
            }
             p_start_node = p_start_node->next;
        }
        
        return start_node.next;
    }
};

思路：使用暴力对比法，进行逐个整合排序，
复杂度分析：时间复杂度：O(k*n1+(k-1)*n2+...+nk),其中k为总的链表数，n1-nk为各个链表的成员数

进阶思路：使用类似归并排序的分治思路，复杂度可以减少到klogn
