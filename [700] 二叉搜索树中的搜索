给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。

/*
 * @lc app=leetcode.cn id=700 lang=cpp
 *
 * [700] 二叉搜索树中的搜索
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(root == nullptr)
            return nullptr;

        if(root->val == val)
            return root;

        auto left = searchBST(root->left,val);
        if(left != nullptr)
            return left;
        auto right = searchBST(root->right,val);
        if(right != nullptr)
            return right;

        return nullptr;
    }
};
// @lc code=end

思路：使用前序遍历，参数为当前节点和要搜索的值，返回值为要找的结点，如果不符合要求，则返回空指针，层间逻辑为先判断当前节点是否满足要求，如果不满足要求，则依次遍历左右节点。
时间复杂度：O(n)
空间复杂度：O(n)
