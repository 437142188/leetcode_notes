给定一个二叉树，返回其节点值自底向上的层序遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

/*
 * @lc app=leetcode.cn id=107 lang=cpp
 *
 * [107] 二叉树的层序遍历 II
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> result;
        if(root == nullptr)
            return result;

        queue<TreeNode*> queue;

        queue.push(root);

        while(!queue.empty())
        {
            int size = queue.size();
            vector<int> temp;
            for(int i =0; i <size; i++)
            {
                auto node = queue.front();
                queue.pop();
                temp.push_back(node->val);
                if(node->left != nullptr)
                    queue.push(node->left);
                if(node->right != nullptr)
                    queue.push(node->right);
            }
            result.push_back(temp);
        }

        reverse(result.begin(),result.end());

        return result;
    }
};
// @lc code=end

思路:层间倒序的广度搜索,先进行正常的广度搜索,最后进行reverse操作
时间复杂度:O(n)
空间复杂度:O(n)
