给定一个不含重复元素的整数数组 nums 。一个以此数组直接递归构建的 最大二叉树 定义如下：

二叉树的根是数组 nums 中的最大元素。
左子树是通过数组中 最大值左边部分 递归构造出的最大二叉树。
右子树是通过数组中 最大值右边部分 递归构造出的最大二叉树。
返回有给定数组 nums 构建的 最大二叉树 。

/*
 * @lc app=leetcode.cn id=654 lang=cpp
 *
 * [654] 最大二叉树
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if(nums.size() == 0)
            return nullptr;

        return recursion(nums,0,nums.size());
    }

    TreeNode* recursion(vector<int>& nums,int start,int end)
    {
        if(start >= end)
            return nullptr;
        
        int max_num = nums[start];
        int max_index = start;
        for(int i = start+1;i < end; i++)
        {
            if(max_num < nums[i])
            {
                max_num = nums[i];
                max_index = i;
            }
        }

        auto node = new TreeNode(max_num);

        int start_left = start;
        int end_left = max_index;
        int start_right = max_index+1;
        int end_right = end;

        node->left = recursion(nums,start_left,end_left);
        node->right = recursion(nums,start_right,end_right);

        return node;        
    }
};
// @lc code=end

思路：使用前序遍历，迭代参数为数组以及数组的左边界和右边界，返回node，终止条件为如果左右边界碰撞。层间逻辑先判断最大值位置，再递归左节点，右节点。
时间复杂度：O(n)
空间复杂度：O(n)
