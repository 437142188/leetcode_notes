实现 strStr() 函数。

给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。

示例 1:

输入: haystack = "hello", needle = "ll"
输出: 2
示例 2:

输入: haystack = "aaaaa", needle = "bba"
输出: -1
说明:

当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。

对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。

代码：
class Solution {
public:
    int strStr(string haystack, string needle) {
        if(needle.size() == 0)
            return 0;
        if(haystack.size() < needle.size())
            return -1;
        
        for(size_t i=0;i < haystack.size() - needle.size() + 1;i++)
        {
            if(haystack.substr(i,needle.size()) == needle)
                return i;
        }
        return -1;
    }
};

思路：逐位从haystack中获取needle大小的子字符串，然后跟needle对比，属于暴力匹配算法
算法复杂度：O(n*m),其中，n为haystack的大小，m为needle的大小

改进：使用kmp算法，先构建一个状态机，根据当前状态以及下一个匹配的字符来进行状态切换，该算法的复杂点在于如何构建这个有限状态机
算法复杂度：时间复杂度O(n)，空间复杂度O（m）。


kmp算法:
/*
 * @lc app=leetcode.cn id=28 lang=cpp
 *
 * [28] 实现 strStr()
 */

// @lc code=start
class Solution {
public:
    int strStr(string haystack, string needle) {

        if(needle.size() == 0)
            return 0;

        vector<int> next_array = getNextArray(needle);

        int j = -1;
        for(int i = 0;i < haystack.size();i++)
        {
            while(j >=0 && needle[j+1] != haystack[i])
            {
                j = next_array[j];
            }

            if(needle[j+1] == haystack[i])
            {
                j++;
            }

            if(j == needle.size()-1)
            {
                return i - needle.size()+1;
            }
        }

        return -1;
    }

    vector<int> getNextArray(string needle)
    {
        vector<int> next(needle.size(),0);

        int j = -1;
        next[0] = j;


        for(int i = 1;i < needle.size();i++)
        {
            while(j >= 0 && needle[i] != needle[j+1])
            {
                j = next[j];
            }
            if(needle[j+1] == needle[i])
                j++;
            
            next[i] = j;
        }

        return next;
    }
};
// @lc code=end

思路:kmp算法需要先构造next数组,构造方法相当于自己对自己进行strStr(),要充分利用之前的next数组
