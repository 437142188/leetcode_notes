给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

 

示例:

给定 1->2->3->4, 你应该返回 2->1->4->3.

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

ListNode * swap_node(ListNode *p1,ListNode *p2)
{
    ListNode *temp = p2->next;
    p2->next = p1;
    p1->next = temp;
    return p2;
}

class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode first_node(0);
        first_node.next = head;
        ListNode * p = &first_node;
        ListNode * p2 = first_node.next;
        while(p2 != NULL && p2->next != NULL)
        {
            p->next = swap_node(p2,p2->next);
            p = p2;
            p2 = p2->next;
        }
        
        return first_node.next;
    }
};

思路：直接编写一个交换两个链表的子函数，然后对整个链表交换即可。
复杂度分析：O(n/2)，n为链表总长度
