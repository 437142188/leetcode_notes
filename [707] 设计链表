/*
 * @lc app=leetcode.cn id=707 lang=cpp
 *
 * [707] 设计链表
 */

// @lc code=start
class MyLinkedList {
public:

    struct MyListNode{
        int val;
        MyListNode* next;
        MyListNode(int val):val(val),next(nullptr){}
    };

    MyLinkedList() {
        //init dummy head
        dummy_head_ = new MyListNode(0);
        size_ = 0;
    }
    
    int get(int index) {
        if(index > size_-1)
            return -1;

        MyListNode* temp = dummy_head_->next;
        for(int i = 0;i < size_;i++)
        {
            if(i == index)
            {
                return temp->val;
            }
            else
            {
                temp = temp->next;
            }
            
        }

        return -1;
    }
    
    void addAtHead(int val) {
        MyListNode* new_list_node = new MyListNode(val);
        new_list_node->next = dummy_head_->next;
        dummy_head_->next = new_list_node;
        size_++;
    }
    
    void addAtTail(int val) {
        MyListNode* new_list_node = new MyListNode(val);
        MyListNode* temp = dummy_head_;
        while(temp->next != nullptr)
        {
            temp = temp->next;
        }
        temp->next = new_list_node;
        size_++;
    }
    
    void addAtIndex(int index, int val) {
        if(index > size_)
            return;
        MyListNode* new_list_node = new MyListNode(val);
        MyListNode* temp = dummy_head_;

        for(int i = 0;i <= size_;i++)
        {
            if(i >= index)
            {
                new_list_node->next = temp->next;
                temp->next = new_list_node;
                size_++;
                return;
            }
            else
            {
                temp = temp->next;
            }
        }
    }
    
    void deleteAtIndex(int index) {
        if(index > size_-1)
            return;

        MyListNode* temp = dummy_head_;
        for(int i = -1;i < size_;i++)
        {
            if(i == index-1)
            {
                MyListNode* temp2 = temp->next->next;
                delete temp->next;
                temp->next = temp2;
                size_--;
                return;
            }
            else
            {
                temp = temp->next;
            }
        }
    }

private:
    int size_;
    MyListNode* dummy_head_;
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */
// @lc code=end

思路:对于链表的增删减查等操作,需要比较仔细的解决指针映射问题
时间复杂度:O(n)
空间复杂度:O(n)
