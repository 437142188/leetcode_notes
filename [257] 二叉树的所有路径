给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。

叶子节点 是指没有子节点的节点。

/*
 * @lc app=leetcode.cn id=257 lang=cpp
 *
 * [257] 二叉树的所有路径
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<vector<int>> result;
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> s_result;
        if(root == nullptr)
            return s_result;
        
        vector<int> temp;
        recall(root,temp);

        
        for(const auto&p:result)
        {
            string s_temp;
            for(const auto&q:p)
            {
                s_temp = s_temp + to_string(q) + "->";
            }
            s_temp.pop_back();
            s_temp.pop_back();
            s_result.push_back(s_temp);
        }

        return s_result;
    }

    void recall(TreeNode* node,vector<int>& temp)
    {
        if(node == nullptr)
            return;

        temp.push_back(node->val);

        recall(node->left,temp);
        recall(node->right,temp);
        if(node->left == nullptr
            && node->right == nullptr)
            result.push_back(temp);
        temp.pop_back();
    }
};
// @lc code=end

思路:使用回溯递归,终止条件是当前节点为空,参数为当前节点和存储的历史节点值,层间逻辑为判断如果左右节点为空,则找到一条路径.
时间复杂度:O(n)
空间复杂度:O(n)
