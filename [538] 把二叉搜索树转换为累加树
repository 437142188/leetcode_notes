给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。

提醒一下，二叉搜索树满足下列约束条件：

节点的左子树仅包含键 小于 节点键的节点。
节点的右子树仅包含键 大于 节点键的节点。
左右子树也必须是二叉搜索树。

/*
 * @lc app=leetcode.cn id=538 lang=cpp
 *
 * [538] 把二叉搜索树转换为累加树
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        if(root == nullptr)
            return nullptr;

        int sum = 0;
        int add = 0;

        recursion(root,sum,add,false);
        recursion(root,sum,add,true);
        return root;

    }

    void recursion(TreeNode* node,int& sum,int& add,bool convert)
    {
        if(node == nullptr)
            return;

        recursion(node->left,sum,add,convert);

        if(convert == true)
        {
            int temp = node->val;
            node->val = sum - add;
            add += temp;
        }
        else
            sum += node->val;

        recursion(node->right,sum,add,convert);

    }
};
// @lc code=end

思路：需要至少中序遍历两次二叉树，第一次求取总和，第二次依次用总和减去当前节点的值，就是下一节点要修改的值。
时间复杂度：O(n)
空间复杂度：O(n)
