给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树不应该改变保留在树中的元素的相对结构（即，如果没有被移除，原有的父代子代关系都应当保留）。 可以证明，存在唯一的答案。

所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。

/*
 * @lc app=leetcode.cn id=669 lang=cpp
 *
 * [669] 修剪二叉搜索树
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if(root == nullptr)
            return nullptr;

        if(root->val < low)
        {
            TreeNode* temp = trimBST(root->right,low,high);
            return temp;
        }
        if(root->val > high)
        {
            TreeNode* temp = trimBST(root->left,low,high);
            return temp;
        }

        root->left = trimBST(root->left,low,high);
        root->right = trimBST(root->right,low,high);

        return root;
    }
};
// @lc code=end

思路：关键是要找出修剪的规律，如果node->val<low，那么node左边的全部都可以丢弃，只需要再遍历右边子节点就可以，如果node->val>high，那么node右边的全部都可以丢弃，只需要遍历左边子节点
就可以。
时间复杂度：O(n)
空间复杂度：O(n)
