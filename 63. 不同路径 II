一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？

网格中的障碍物和空位置分别用 1 和 0 来表示。


/*
 * @lc app=leetcode.cn id=63 lang=cpp
 *
 * [63] 不同路径 II
 */

// @lc code=start
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int row = obstacleGrid.size();
        int col = obstacleGrid.front().size();

        if(obstacleGrid[0][0] == 1)
            return 0;

        if(row == 1 && col == 1)
        {
            return 1;
        }

        int dp[row][col];
        memset(dp,0,row*col);

        for(int i =0;i < row;i++)
        {
            for(int j =0;j < col;j++)
            {
                if(i == 0 && j == 0)
                {
                    dp[i][j] = 1;
                }
                else if(obstacleGrid[i][j] == 1)
                {
                    dp[i][j] = 0;
                }
                else
                {
                    int a = i == 0 ? 0 : dp[i-1][j];
                    int b = j == 0 ? 0 : dp[i][j-1];
                    dp[i][j] = a + b;
                }
                
            }
        }

        return dp[row-1][col-1];
    }
};
// @lc code=end

思路:使用动态规划,推导的递推公式变成了分段函数,第一段为f(i,j) = f(i-1,j)+f(i,j-1),第二段为如果(i,j)点有障碍物,则f(i,j)=0
时间复杂度:O(n*m)
空间复杂度:O(n*m)
