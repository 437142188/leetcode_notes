给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。

你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。

/*
 * @lc app=leetcode.cn id=617 lang=cpp
 *
 * [617] 合并二叉树
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        return recursion(root1,root2);
    }

    TreeNode* recursion(TreeNode* root1,TreeNode* root2)
    {
        if(root1 == nullptr && root2 == nullptr)
            return nullptr;

        if(root1 == nullptr)
            return root2;
        if(root2 == nullptr)
            return root1;

        root1->val += root2->val;

        root1->left = recursion(root1->left,root2->left);
        root1->right = recursion(root1->right,root2->right);

        return root1;
    }
};
// @lc code=end

思路：使用前序递归，参数为左右两个二叉树的结点，返回值为当前有效结点。终止条件为一方为null，则返回另一方，如果双方为null，则返回null。层间逻辑为如果两个二叉树皆有效，则结点值相加，
然后递归左节点和右节点。
时间复杂度：O(n)
空间复杂度：O(n)

