给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

    所有数字（包括 target）都是正整数。
    解集不能包含重复的组合。 

示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]

示例 2:

输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

代码：
class Solution {
    private:
    vector<int> candidates;
    vector<vector<int>> res;
    vector<int> path;
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        std::sort(candidates.begin(),candidates.end());
        this->candidates = candidates;
        
        DFS(0,target);
        
        return res;
    }
    
    void DFS(int start,int target)
    {
        if(target == 0)
        {
            res.push_back(path);
            return;
        }
        
        for(int i = start;i < candidates.size() && target - candidates[i] >=0;i++)
        {
            path.push_back(candidates[i]);
            DFS(i,target - candidates[i]);
            path.pop_back();
        }
    }
    
};

思路：这是树型结构产生的回溯和剪枝的典型应用。核心思路是将树型结构画出来，然后编写代码。难点在于回溯的递归函数和裁剪的条件的寻找。
算法复杂度：O(n^2)
