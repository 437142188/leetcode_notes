给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。

假设二叉树中至少有一个节点。

/*
 * @lc app=leetcode.cn id=513 lang=cpp
 *
 * [513] 找树左下角的值
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {

        queue<TreeNode*> queue;
        queue.push(root);
        int result;

        while(!queue.empty())
        {
            int size = queue.size();
            result = queue.front()->val;
            for(int i = 0; i < size; i++)
            {
                auto node = queue.front();
                queue.pop();
                if(node->left != nullptr)
                    queue.push(node->left);
                if(node->right != nullptr)
                    queue.push(node->right);
            }
        }

        return result;
    }
};
// @lc code=end

思路:使用层序遍历,缓存每一层第一个节点的值
时间复杂度:O(n)
空间复杂度:O(n)
