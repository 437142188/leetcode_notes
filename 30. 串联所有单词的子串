给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。

注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。

 

示例 1：

输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。

示例 2：

输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
输出：[]

代码：
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
     
        vector<int> out;
        int words_size = words.size();
        int s_size = s.size();
        if(words_size == 0)
            return out;
        
        int word_size = words[0].size();
        if(s_size < words_size*word_size)
            return out;
        
        unordered_map<string,int> m1;
        for(const auto& word:words)
        {
            m1[word]++;
        }
        
        
        unordered_map<string,int> m2;
        for(int i = 0;i <= s_size - words_size*word_size;i++)
        {
            int j = 0;
            for(;j < words_size;j++)
            {
                string sub_s = s.substr(i+j*word_size,word_size);
                
                if(m1[sub_s] == 0)
                {
                    break;
                }
                else
                {
                    m2[sub_s]++;
                                    
                    if(m2[sub_s] > m1[sub_s])
                    {
                        break;
                    }
                }
            }
            
            if(j == words_size)
            {
                out.push_back(i);
            }

            m2.clear();
        }
        
        return out;
    }
};

思路：使用两个ｈａｓｈｍａｐ，其中key存储字符,value存储出现的次数，第一个使用给定的输入ｖｅｃｔｏｒ来初始化，第二个使用滑动窗来初始化，最终看两个ｈａｓｈｍａｐ是否相等，使用ｈａｓｈｍａｐ的
好处是可以屏蔽掉字符串出现顺序带来的麻烦。
算法复杂度：时间复杂度：O(n*m),其中n为s的大小，m为单词的大小
