给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。

有效 二叉搜索树定义如下：

节点的左子树只包含 小于 当前节点的数。
节点的右子树只包含 大于 当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。

/*
 * @lc app=leetcode.cn id=98 lang=cpp
 *
 * [98] 验证二叉搜索树
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        vector<int> saved_int;
        recursion(root,saved_int);

        for(int i = 1; i < saved_int.size(); i++)
        {
            if(saved_int[i] <= saved_int[i-1])
                return false;
        }

        return true;
    }

    void recursion(TreeNode* node,vector<int>& saved_int)
    {
        if(node == nullptr)
            return;

        recursion(node->left,saved_int);

        saved_int.push_back(node->val);

        recursion(node->right,saved_int);

        return;
    }
};
// @lc code=end

思路：中序遍历得到的排列，对于二叉搜索树是递增的。因此先遍历出所有的结点，然后判断排列是否为递增数组即可。
时间复杂度：O(n)
空间复杂度：O(n)
