给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。

一般来说，删除节点可分为两个步骤：

首先找到需要删除的节点；
如果找到了，删除它。

/*
 * @lc app=leetcode.cn id=450 lang=cpp
 *
 * [450] 删除二叉搜索树中的节点
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {

        return recursion(root,key);
    }

    TreeNode* recursion(TreeNode* node,int key)
    {
        if(node == nullptr)
            return nullptr;

        if(node->val == key)
        {
            if(node->left == nullptr && node->right == nullptr)
            {
                delete node;
                return nullptr;
            }
            else if(node->left == nullptr)
            {
                auto temp = node->right;
                delete node;
                return temp;
            }
            else if(node->right == nullptr)
            {
                auto temp = node->left;
                delete node;
                return temp;
            }
            else
            {
                auto temp = node->right;
                while(temp->left != nullptr)
                {
                    temp = temp->left;
                }
                temp->left = node->left;
                auto temp2 = node->right;
                delete node;
                return temp2;
            }
        }
        if(node->val > key) node->left = recursion(node->left,key);
        if(node->val < key) node->right = recursion(node->right,key);
        return node;
    }   
};
// @lc code=end

思路：需要分五种情况来处理：
1，如果子节点全部为空，则直接返回空
2，如果左节点为空，则右节点补上
3，如果右节点为空，则左节点补上
4，如果左右节点全部非空，则右节点补上，左节点接入右节点的最左子节点
5，如果当前节点为空，则表示没有找到对应的key，返回空
时间复杂度：O(n)
空间复杂度：O(n)
