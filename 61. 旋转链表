给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。

题解：
/*
 * @lc app=leetcode.cn id=61 lang=cpp
 *
 * [61] 旋转链表
 */

// @lc code=start
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {

        int rotate_num = 0;
        int n = 0;
        ListNode* list_temp = head;
        if(list_temp == nullptr || list_temp->next == nullptr
            || k == 0)
            return head;

        vector<ListNode*> point_vector;
        int head_index = 0;
        while(list_temp != nullptr)
        {
            point_vector.push_back(list_temp);
            list_temp = list_temp->next;
            n++;
        }

        head_index = k % n;
        if(head_index == 0)
            return head;
            
        head_index = n - (k % n);

        if(head_index == 0)
            return head;

        //make raw list to cycle
        point_vector.back()->next = point_vector.front();

        //cut pre head_index list_node
        point_vector[head_index-1]->next = nullptr;

        return point_vector[head_index];        
    }
};
// @lc code=end

思路：使用一个数组存储链表的地址，找出旋转后得头结点位置，再对原始的链表的末尾分别进行连接和切割工作
时间复杂度：O(n)
空间复杂度：O(n)
