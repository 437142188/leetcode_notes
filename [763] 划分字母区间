字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。

/*
 * @lc app=leetcode.cn id=763 lang=cpp
 *
 * [763] 划分字母区间
 */

// @lc code=start
class Solution {
public:
    vector<int> partitionLabels(string s) {
        if(s.size() == 0)
            return vector<int>(1,0);

        unordered_map<char,int> indexs;

        for(int i = 0; i < s.size(); i++)
        {
            indexs[s[i]] = i;
        }

        int start_index = 0;
        int cur_max = indexs[s[0]];
        vector<int> result;
        for(int i = 0; i < s.size(); i++)
        {
            if(cur_max < indexs[s[i]])
                cur_max = indexs[s[i]];
            if(cur_max == i)
            {
                result.push_back(cur_max - start_index + 1);
                start_index = cur_max + 1;
            }
        }
        return result;
    }
};
// @lc code=end

思路:需要进行两次遍历,第一次找出出现的字母在字符串中的最大位置,此位置便是分割的参考点.第二次根据遍历的字母中的最大值,如果恰好等于当前位置,则分割
时间复杂度:O(n)
空间复杂度:O(1)
