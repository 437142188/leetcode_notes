给定一个二叉树，返回它的 后序 遍历。

/*
 * @lc app=leetcode.cn id=145 lang=cpp
 *
 * [145] 二叉树的后序遍历
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        
        vector<int> result;
        if(root == nullptr)
            return result;

        stack<TreeNode*> st;

        st.push(root);

        while(!st.empty())
        {
            auto left = st.top()->left;
            auto right = st.top()->right;
            result.push_back(st.top()->val);
            st.pop();

            if(left != nullptr)
                st.push(left);
            if(right != nullptr)
                st.push(right);
        }

        reverse(result.begin(),result.end());

        return result;
    }
};
// @lc code=end

思路:仿照前序遍历的方法,前序遍历为中左右,将其改成中右左,最后整个进行reverse,输出结果
时间复杂度:O(n)
空间复杂度:O(n)
